<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.gold.wang.sharding.jdbc.mapper.StockGoodsTradeMapper">
    <resultMap id="BaseResultMap" type="com.gold.wang.sharding.jdbc.entity.StockGoodsTrade">
        <id column="id" jdbcType="BIGINT" property="id"/>
        <result column="order_id" jdbcType="BIGINT" property="orderId"/>
        <result column="business_id" jdbcType="BIGINT" property="businessId"/>
        <result column="store_id" jdbcType="BIGINT" property="storeId"/>
        <result column="sku_merchant_code" jdbcType="VARCHAR" property="skuMerchantCode"/>
        <result column="batch_no" jdbcType="VARCHAR" property="batchNo"/>
        <result column="batch_code" jdbcType="VARCHAR" property="batchCode"/>
        <result column="charge_back_id" jdbcType="VARCHAR" property="chargeBackId"/>
        <result column="quantity" jdbcType="DECIMAL" property="quantity"/>
        <result column="piece_quantity" jdbcType="DECIMAL" property="pieceQuantity"/>
        <result column="type" jdbcType="TINYINT" property="type"/>
        <result column="status" jdbcType="TINYINT" property="status"/>
        <result column="created_by" jdbcType="VARCHAR" property="createdBy"/>
        <result column="gmt_create" jdbcType="TIMESTAMP" property="gmtCreate"/>
        <result column="last_modified_by" jdbcType="VARCHAR" property="lastModifiedBy"/>
        <result column="gmt_update" jdbcType="TIMESTAMP" property="gmtUpdate"/>
    </resultMap>
    <sql id="Base_Column_List">
        id, order_id, business_id, store_id, sku_merchant_code, batch_no,batch_code, charge_back_id,
        quantity, piece_quantity, version, extend, type, status, created_by, gmt_create, last_modified_by,
        gmt_update
    </sql>

    <insert id="insert" parameterType="com.gold.wang.sharding.jdbc.entity.StockGoodsTrade">
        insert into stock_goods_trade (id,store_id,
        business_id,order_id, sku_merchant_code, batch_no,batch_code,
        charge_back_id, quantity, piece_quantity, type, status,
        created_by, gmt_create, last_modified_by,gmt_update)
        values (#{id,jdbcType=BIGINT},#{storeId,jdbcType=BIGINT},#{businessId,jdbcType=BIGINT},
         #{orderId,jdbcType=BIGINT}, #{skuMerchantCode,jdbcType=VARCHAR}, #{batchNo,jdbcType=VARCHAR}, #{batchCode,jdbcType=VARCHAR},
        #{chargeBackId,jdbcType=VARCHAR}, #{quantity,jdbcType=DECIMAL}, #{pieceQuantity,jdbcType=DECIMAL},
         #{type,jdbcType=TINYINT}, #{status,jdbcType=TINYINT}, #{createdBy,jdbcType=VARCHAR}, SYSDATE(), #{lastModifiedBy,jdbcType=VARCHAR},
        SYSDATE())
    </insert>

    <insert id="insertBatch" parameterType="java.util.List">
        insert into stock_goods_trade (id,store_id,
        business_id,order_id, sku_merchant_code, batch_no,batch_code,
        charge_back_id, quantity, piece_quantity, type, status,
        created_by, gmt_create, last_modified_by,gmt_update)
        values
        <foreach collection="list" item="info" index="index" separator=",">
            (#{info.id,jdbcType=BIGINT},#{info.storeId,jdbcType=BIGINT},#{info.businessId,jdbcType=BIGINT},
            #{info.orderId,jdbcType=BIGINT}, #{info.skuMerchantCode,jdbcType=VARCHAR}, #{info.batchNo,jdbcType=VARCHAR},
            #{info.batchCode,jdbcType=VARCHAR},
            #{info.chargeBackId,jdbcType=VARCHAR}, #{info.quantity,jdbcType=DECIMAL},
            #{info.pieceQuantity,jdbcType=DECIMAL},#{info.type,jdbcType=TINYINT}, #{info.status,jdbcType=TINYINT},
            #{info.createdBy,jdbcType=VARCHAR}, SYSDATE(), #{info.lastModifiedBy,jdbcType=VARCHAR},
            SYSDATE())
        </foreach>
    </insert>


    <select id="batchSelect" resultMap="BaseResultMap" parameterType="java.util.List">
        select
        <include refid="Base_Column_List"></include>
        from stock_goods_trade
        where id in
        <foreach item="id" index="index" collection="list"
                 open="(" separator="," close=")">
            #{id}
        </foreach>
    </select>


    <!-- 如果是多条件的也可以 通过or 转化为批量查询 -->
    <!--    <select id="getStoreStockGoodsBatchCodeBatch" resultMap="BaseResultMap">-->
    <!--        select-->
    <!--        <include refid="Base_Column_List"></include>-->
    <!--        from stock_goods_batch_code-->
    <!--        where store_id = #{storeId}-->
    <!--        and-->
    <!--        <foreach close=")" collection="goodsInfos" item="p" open="("-->
    <!--                 separator="or">-->
    <!--            (sku_merchant_code = #{p.skuMerchantCode} and batch_no = #{p.batchNo} and batch_code = #{p.batchCode})-->
    <!--        </foreach>-->
    <!--    </select>-->


</mapper>
